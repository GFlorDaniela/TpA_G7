from telegram.ext import Updater, CommandHandler
import requests

# URL de la API intermedia
API_URL = "http://tu_api.com/accion"

# TOKEN de tu bot
BOT_TOKEN = "8238234652:AAEVwkqELgLiu8f_RpWsZlKfxq9azuSubUI"

# ===========================
# COMANDOS DEL BOT
# ===========================

#NUEVAS IDEAS
#Tener distintos tipos de partidas, 1vs1, 2vs2, jugar contra el ultimo ranking cargado en la memoria y multi jugador (probar si se puede lo de conctar los 20 usuarios)


def ranking(update, context):
    """Consulta el ranking actual"""
    try:
        r = requests.get(f"{API_URL}/ranking")
        if r.status_code == 200:
            ranking = r.json().get("ranking", [])
            if ranking:
                mensaje = "🏆 *Ranking Actual:*\n"
                for i, u in enumerate(ranking, start=1):
                    mensaje += f"{i}. {u['nombre']} - {u['puntos']} pts ({u['partidas']} partidas)\n"
            else:
                mensaje = "⚠️ No hay usuarios registrados aún."
        else:
            mensaje = "Error al obtener el ranking."
    except Exception as e:
        mensaje = f"❌ Error al conectar con la API: {e}"

    update.message.reply_text(mensaje, parse_mode="Markdown")

def cargar_pregunta(update, context):
    """Carga una nueva pregunta (desde Telegram hacia la API)"""
    try:
        texto = " ".join(context.args)
        if not texto:
            update.message.reply_text("⚠️ Usa el formato: /cargar_pregunta pregunta;op1;op2;op3;correcta")
            return
        requests.post(f"{API_URL}/pregunta", json={"texto": texto})
        update.message.reply_text("✅ Pregunta cargada correctamente.")
    except Exception as e:
        update.message.reply_text(f"❌ Error: {e}")

def respuestas_nuevas(update, context):
    """Pide nuevas respuestas o actualiza el banco"""
    try:
        requests.post(f"{API_URL}/respuestas_nuevas")
        update.message.reply_text("🔄 Respuestas actualizadas.")
    except Exception as e:
        update.message.reply_text(f"❌ Error: {e}")

def ingresar_usuario(update, context):
    """Registra un nuevo usuario"""
    try:
        if len(context.args) == 0:
            update.message.reply_text("⚠️ Usa: /ingresar_usuario NombreUsuario")
            return
        nombre = context.args[0].upper()
        requests.post(f"{API_URL}/usuario", json={"nombre": nombre})
        update.message.reply_text(f"👤 Usuario '{nombre}' ingresado correctamente.")
    except Exception as e:
        update.message.reply_text(f"❌ Error: {e}")

def iniciar_partida(update, context):
    """Inicia una nueva partida"""
    try:
        requests.post(f"{API_URL}/iniciar_partida")
        update.message.reply_text("🎮 Partida iniciada en el ESP32.")
    except Exception as e:
        update.message.reply_text(f"❌ Error: {e}")

# ===========================
# CONFIGURACIÓN DEL BOT
# ===========================
def main():
    updater = Updater(BOT_TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("ranking", ranking))
    dp.add_handler(CommandHandler("cargar_pregunta", cargar_pregunta))
    dp.add_handler(CommandHandler("respuestas_nuevas", respuestas_nuevas))
    dp.add_handler(CommandHandler("ingresar_usuario", ingresar_usuario))
    dp.add_handler(CommandHandler("iniciar_partida", iniciar_partida))

    updater.start_polling()
    print("🤖 Bot de Telegram en ejecución...")
    updater.idle()

if __name__ == "__main__":
    main()

