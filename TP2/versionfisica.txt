#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>
#include <SPIFFS.h>
#include <ArduinoJson.h>

// OLED
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SH1106G display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Pines
#define LED_PIN 23
#define ENCODER_CLK 18
#define ENCODER_DT 5
#define ENCODER_SW 19

// Estructuras de datos
struct Pregunta {
  String texto;
  String opciones[3];
  int respuestaCorrecta;
  int puntaje;
};

struct Usuario {
  String nombre;
  int puntuacionMaxima;
  int partidasJugadas;
  time_t ultimaPartida;
};

// Variables globales
Pregunta preguntas[50];
Usuario usuarios[100];
int totalPreguntas = 0;
int totalUsuarios = 0;
int preguntaActual = 0;
int opcionSeleccionada = 0;
int puntuacionTotal = 0;
int usuarioActual = -1;
bool quizCompletado = false;
bool quizIniciado = false;
bool ingresandoNombre = false;
String nombreTemp = "";

// Variables encoder
int lastCLK = HIGH;
unsigned long lastButtonPress = 0;

// FUNCIONES SPIFFS - MANEJO DE ARCHIVOS REALES

void exportarUsuariosJSONFormateado() {
  Serial.println("\nüíæ EXPORTANDO usuarios.json (FORMATEADO)...");
  
  File archivo = SPIFFS.open("/usuarios.json", "r");
  if(!archivo){
    Serial.println("ERROR: No se pudo abrir usuarios.json");
    return;
  }
  
  // Parsear y re-serializar para formato limpio
  DynamicJsonDocument doc(8192);
  DeserializationError error = deserializeJson(doc, archivo);
  archivo.close();
  
  if(error) {
    Serial.println("ERROR parsing JSON: " + String(error.c_str()));
    return;
  }
  
  Serial.println("=== COPIAR DESDE AQU√ç ===");
  serializeJsonPretty(doc, Serial);
  Serial.println("\n=== COPIAR HASTA AQU√ç ===");
}



bool inicializarSPIFFS() {
  if(!SPIFFS.begin(true)){
    Serial.println("Error al montar SPIFFS");
    return false;
  }
  Serial.println("SPIFFS montado correctamente");
  return true;
}

bool cargarPreguntas() {
  File archivo = SPIFFS.open("/preguntas.json", "r");
  if(!archivo){
    Serial.println("Error al abrir preguntas.json");
    return false;
  }
  
  DynamicJsonDocument doc(4096);
  DeserializationError error = deserializeJson(doc, archivo);
  archivo.close();
  
  if(error){
    Serial.println("Error al parsear JSON: " + String(error.c_str()));
    return false;
  }
  
  JsonArray preguntasArray = doc.as<JsonArray>();
  totalPreguntas = 0;
  
  for(JsonObject preguntaObj : preguntasArray) {
    if(totalPreguntas >= 50) break;
    
    preguntas[totalPreguntas].texto = preguntaObj["texto"].as<String>();
    preguntas[totalPreguntas].opciones[0] = preguntaObj["opciones"][0].as<String>();
    preguntas[totalPreguntas].opciones[1] = preguntaObj["opciones"][1].as<String>();
    preguntas[totalPreguntas].opciones[2] = preguntaObj["opciones"][2].as<String>();
    preguntas[totalPreguntas].respuestaCorrecta = preguntaObj["correcta"].as<int>();
    preguntas[totalPreguntas].puntaje = preguntaObj["puntaje"].as<int>();
    
    totalPreguntas++;
  }
  
  Serial.println("Preguntas cargadas: " + String(totalPreguntas));
  return true;
}

bool guardarUsuarios() {
  File archivo = SPIFFS.open("/usuarios.json", "w");
  Serial.println("HOLA");
  if(!archivo){
    Serial.println("Error al crear usuarios.json");
    return false;
  }
  
  DynamicJsonDocument doc(8192);
  JsonArray usuariosArray = doc.to<JsonArray>();
  
  for(int i = 0; i < totalUsuarios; i++) {
    JsonObject usuarioObj = usuariosArray.createNestedObject();
    usuarioObj["nombre"] = usuarios[i].nombre;
    usuarioObj["puntuacionMaxima"] = usuarios[i].puntuacionMaxima;
    usuarioObj["partidasJugadas"] = usuarios[i].partidasJugadas;
    usuarioObj["ultimaPartida"] = usuarios[i].ultimaPartida;
  }
  
  if(serializeJsonPretty(doc, archivo) == 0){
    Serial.println("Error al escribir en usuarios.json");
    archivo.close();
    return false;
  }
  
  archivo.close();
  Serial.println("Usuarios guardados correctamente");
  exportarUsuariosJSONFormateado();
  
  return true;
}

bool cargarUsuarios() {
  if(!SPIFFS.exists("/usuarios.json")) {
    Serial.println("Archivo usuarios.json no existe, se crear√° uno nuevo");
    return guardarUsuarios(); // Crear archivo vac√≠o
  }
  
  File archivo = SPIFFS.open("/usuarios.json", "r");
  if(!archivo){
    Serial.println("Error al abrir usuarios.json");
    return false;
  }
  
  DynamicJsonDocument doc(8192);
  DeserializationError error = deserializeJson(doc, archivo);
  archivo.close();
  
  if(error){
    Serial.println("Error al parsear JSON: " + String(error.c_str()));
    return false;
  }
  
  JsonArray usuariosArray = doc.as<JsonArray>();
  totalUsuarios = 0;
  
  for(JsonObject usuarioObj : usuariosArray) {
    if(totalUsuarios >= 100) break;
    
    usuarios[totalUsuarios].nombre = usuarioObj["nombre"].as<String>();
    usuarios[totalUsuarios].puntuacionMaxima = usuarioObj["puntuacionMaxima"].as<int>();
    usuarios[totalUsuarios].partidasJugadas = usuarioObj["partidasJugadas"].as<int>();
    usuarios[totalUsuarios].ultimaPartida = usuarioObj["ultimaPartida"].as<time_t>();
    
    totalUsuarios++;
  }
  
  Serial.println("Usuarios cargados: " + String(totalUsuarios));
  return true;
}


bool guardarPuntuacionFinal() {
  if(usuarioActual < 0) return false;
  
  time_t ahora = time(nullptr);
  char fechaStr[20];
  strftime(fechaStr, sizeof(fechaStr), "%Y-%m-%d %H:%M:%S", localtime(&ahora));
  
  File archivo = SPIFFS.open("/puntuacion_final.txt", "a");
  if(!archivo){
    Serial.println("Error al crear puntuacion_final.txt");
    return false;
  }
  
  archivo.println("Usuario: " + usuarios[usuarioActual].nombre);
  archivo.println("Puntuacion: " + String(puntuacionTotal));
  archivo.println("Preguntas: " + String(totalPreguntas));
  archivo.println("Fecha: " + String(fechaStr));
  archivo.println("-------------------");
  
  archivo.close();
  Serial.println("Puntuaci√≥n final guardada");
  return true;
}

// FUNCIONES DE USUARIOS
int buscarUsuario(String nombre) {
  for(int i = 0; i < totalUsuarios; i++) {
    if(usuarios[i].nombre == nombre) {
      return i;
    }
  }
  return -1;
}

void agregarUsuario(String nombre) {
  if(totalUsuarios < 100) {
    usuarios[totalUsuarios].nombre = nombre;
    usuarios[totalUsuarios].puntuacionMaxima = 0;
    usuarios[totalUsuarios].partidasJugadas = 0;
    usuarios[totalUsuarios].ultimaPartida = time(nullptr);
    usuarioActual = totalUsuarios;
    totalUsuarios++;
    
    guardarUsuarios(); // Guardar inmediatamente
    Serial.println("Nuevo usuario creado: " + nombre);
  }
}

void actualizarPuntuacionUsuario() {
  if(usuarioActual >= 0) {
    usuarios[usuarioActual].partidasJugadas++;
    usuarios[usuarioActual].ultimaPartida = time(nullptr);
    
    if(puntuacionTotal > usuarios[usuarioActual].puntuacionMaxima) {
      usuarios[usuarioActual].puntuacionMaxima = puntuacionTotal;
    }
    
    guardarUsuarios(); // Guardar cambios
    guardarPuntuacionFinal(); // Guardar registro de partida
    
    Serial.println("Usuario " + usuarios[usuarioActual].nombre + 
                  " actualizado. Max: " + usuarios[usuarioActual].puntuacionMaxima +
                  " Partidas: " + usuarios[usuarioActual].partidasJugadas);
  }
}

void mostrarRanking() {
  Serial.println("=== RANKING ACTUAL ===");
  // Ordenar usuarios por puntuaci√≥n m√°xima (burbuja simple)
  for(int i = 0; i < totalUsuarios - 1; i++) {
    for(int j = i + 1; j < totalUsuarios; j++) {
      if(usuarios[j].puntuacionMaxima > usuarios[i].puntuacionMaxima) {
        Usuario temp = usuarios[i];
        usuarios[i] = usuarios[j];
        usuarios[j] = temp;
      }
    }
  }
  
  for(int i = 0; i < min(totalUsuarios, 10); i++) {
    Serial.println(String(i+1) + ". " + usuarios[i].nombre + 
                  " - Puntos: " + usuarios[i].puntuacionMaxima +
                  " - Partidas: " + usuarios[i].partidasJugadas);
  }
  Serial.println("=====================");
}

// FUNCIONES DE INTERFAZ (igual que en la versi√≥n Wokwi)
void mostrarPantallaInicio() {
  display.clearDisplay();
  display.setCursor(10, 10);
  display.println("QUIZ ESP32");
  display.setCursor(5, 25);
  display.println("SPIFFS Edition");
  display.setCursor(0, 45);
  display.println("Gira encoder empezar");
  display.display();
}

void mostrarIngresoNombre() {
  display.clearDisplay();
  display.setCursor(10, 10);
  display.println("INGRESA TU NOMBRE");
  display.setCursor(0, 25);
  display.println("Nombre: " + nombreTemp);
  display.setCursor(0, 45);
  display.println("Gira:letras  Click:ok");
  display.display();
}

void mostrarTextoEnLineas(String texto, int x, int y, int anchoMax) {
  int inicio = 0;
  int fin = anchoMax / 6;
  
  while (inicio < texto.length()) {
    if (fin > texto.length()) fin = texto.length();
    
    int ultimoEspacio = texto.lastIndexOf(' ', fin);
    if (ultimoEspacio == -1 || ultimoEspacio <= inicio) ultimoEspacio = fin;
    
    display.setCursor(x, y);
    display.println(texto.substring(inicio, ultimoEspacio));
    
    y += 10;
    inicio = ultimoEspacio + 1;
    fin = inicio + (anchoMax / 6);
  }
}

String limpiarTexto(String texto) {
  texto.replace("√°", "a");
  texto.replace("√©", "e");
  texto.replace("√≠", "i");
  texto.replace("√≥", "o");
  texto.replace("√∫", "u");
  texto.replace("√±", "n");
  texto.replace("¬ø", "?");
  texto.replace("¬°", "!");
  return texto;
}

void mostrarPregunta() {
  display.clearDisplay();
  
  display.setCursor(0, 0);
  if(usuarioActual >= 0) {
    display.print(usuarios[usuarioActual].nombre);
  } else {
    display.print("JUGADOR");
  }
  display.setCursor(70, 0);
  display.print(preguntaActual + 1);
  display.print("/");
  display.print(totalPreguntas);
  display.setCursor(100, 0);
  display.print(puntuacionTotal);
  
  mostrarTextoEnLineas(limpiarTexto(preguntas[preguntaActual].texto), 0, 12, 120);
  
  for(int i = 0; i < 3; i++) {
    display.setCursor(5, 25 + i * 12);
    if(i == opcionSeleccionada) {
      display.print("> ");
    } else {
      display.print("  ");
    }
    display.println(preguntas[preguntaActual].opciones[i]);
  }
  
  display.display();
}

void mostrarResultado() {
  display.clearDisplay();
  display.setCursor(20, 10);
  display.println("QUIZ COMPLETADO!");
  display.setCursor(10, 25);
  if(usuarioActual >= 0) {
    display.print("Jugador: ");
    display.println(usuarios[usuarioActual].nombre);
  }
  display.setCursor(30, 40);
  display.print("Puntos: ");
  display.println(puntuacionTotal);
  display.setCursor(5, 55);
  display.println("Click para reiniciar");
  display.display();
}

void verificarRespuesta() {
  bool correcta = (opcionSeleccionada == preguntas[preguntaActual].respuestaCorrecta);
  
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println(preguntas[preguntaActual].texto);
  display.setCursor(0, 15);
  display.print("Elegiste: ");
  display.println(preguntas[preguntaActual].opciones[opcionSeleccionada]);
  
  if(correcta) {
    puntuacionTotal += preguntas[preguntaActual].puntaje;
    display.setCursor(0, 30);
    display.print("CORRECTO! +");
    display.print(preguntas[preguntaActual].puntaje);
    digitalWrite(LED_PIN, HIGH);
  } else {
    display.setCursor(0, 30);
    display.println("INCORRECTO");
    display.setCursor(0, 45);
    display.print("Correcta: ");
    display.println(preguntas[preguntaActual].opciones[preguntas[preguntaActual].respuestaCorrecta]);
  }
  
  display.display();
  delay(3000);
  digitalWrite(LED_PIN, LOW);
  
  preguntaActual++;
  if(preguntaActual >= totalPreguntas) {
    quizCompletado = true;
    actualizarPuntuacionUsuario();
    mostrarRanking();
    mostrarResultado();
  } else {
    opcionSeleccionada = 0;
    mostrarPregunta();
  }
}

void reiniciarQuiz() {
  preguntaActual = 0;
  opcionSeleccionada = 0;
  puntuacionTotal = 0;
  quizCompletado = false;
  quizIniciado = false;
  ingresandoNombre = false;
  nombreTemp = "";
  usuarioActual = -1;
  mostrarPantallaInicio();
}

void procesarEntradaNombre() {
  static char letraActual = 'A';
  static unsigned long ultimoGiro = 0;
  
  int currentCLK = digitalRead(ENCODER_CLK);
  
  if(currentCLK != lastCLK && currentCLK == LOW) {
    if(millis() - ultimoGiro > 150) {
      if(digitalRead(ENCODER_DT) == LOW) {
        letraActual++;
      } else {
        letraActual--;
      }
      
      if(letraActual < 'A') letraActual = 'Z';
      if(letraActual > 'Z') letraActual = 'A';
      
      if(nombreTemp.length() > 0) {
        nombreTemp.remove(nombreTemp.length() - 1);
      }
      nombreTemp += String(letraActual);
      
      mostrarIngresoNombre();
      ultimoGiro = millis();
    }
  }
  lastCLK = currentCLK;
  
  if(digitalRead(ENCODER_SW) == LOW && millis() - lastButtonPress > 500) {
    lastButtonPress = millis();
    
    if(nombreTemp.length() == 0) {
      nombreTemp = "A";
      letraActual = 'A';
      mostrarIngresoNombre();
    } else if(nombreTemp.length() < 8) {
      nombreTemp += "A";
      letraActual = 'A';
      mostrarIngresoNombre();
    } else {
      int usuarioExistente = buscarUsuario(nombreTemp);
      if(usuarioExistente == -1) {
        agregarUsuario(nombreTemp);
      } else {
        usuarioActual = usuarioExistente;
        Serial.println("Usuario existente: " + nombreTemp);
      }
      
      ingresandoNombre = false;
      quizIniciado = true;
      mostrarPregunta();
    }
  }
}

void setup() {
  Serial.begin(9600);
  Serial.println("Terminal abierta");
  
  pinMode(LED_PIN, OUTPUT);
  pinMode(ENCODER_CLK, INPUT_PULLUP);
  pinMode(ENCODER_DT, INPUT_PULLUP);
  pinMode(ENCODER_SW, INPUT_PULLUP);
  
  display.begin(0x3c, true);
  display.setTextSize(1);
  display.setTextColor(SH110X_WHITE);
  display.clearDisplay();
  
  // Inicializar sistema de archivos
  if(!inicializarSPIFFS()) {
    Serial.println("Fallo en SPIFFS, usando modo simulaci√≥n");
  }
  
  // Cargar datos
  if(!cargarPreguntas()) {
    Serial.println("Usando preguntas por defecto");
    // Aqu√≠ podr√≠as cargar preguntas por defecto
  }
  
  if(!cargarUsuarios()) {
    Serial.println("Error cargando usuarios");
  }
  
  configTime(0, 0, "pool.ntp.org"); // Para timestamp
  
  mostrarPantallaInicio();
  Serial.println("Quiz listo - Gira encoder para comenzar");
}

void loop() {
  int currentCLK = digitalRead(ENCODER_CLK);
  
  if(ingresandoNombre) {
    procesarEntradaNombre();
    return;
  }
  
  if(quizCompletado) {
    if(digitalRead(ENCODER_SW) == LOW && millis() - lastButtonPress > 500) {
      lastButtonPress = millis();
      reiniciarQuiz();
    }
    return;
  }
  
  if(!quizIniciado) {
    if(currentCLK != lastCLK) {
      ingresandoNombre = true;
      nombreTemp = "A";
      mostrarIngresoNombre();
    }
    lastCLK = currentCLK;
    return;
  }
  
  if(currentCLK != lastCLK && currentCLK == LOW) {
    if(digitalRead(ENCODER_DT) == LOW) {
      opcionSeleccionada++;
    } else {
      opcionSeleccionada--;
    }
    
    if(opcionSeleccionada < 0) opcionSeleccionada = 2;
    if(opcionSeleccionada > 2) opcionSeleccionada = 0;
    
    mostrarPregunta();
  }
  lastCLK = currentCLK;
  
  if(digitalRead(ENCODER_SW) == LOW && millis() - lastButtonPress > 300) {
    lastButtonPress = millis();
    verificarRespuesta();
  }
}